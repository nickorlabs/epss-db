import os
import requests
import logging
import csv
import json
import subprocess
import tempfile

RAW_DATA_DIR = os.environ.get("RAW_DATA_DIR", "/etl-data/raw")
EXPLOITDB_CSV_URL = "https://gitlab.com/exploit-database/exploitdb/-/raw/main/files_exploits.csv"
EXPLOITDB_REPO = "https://gitlab.com/exploit-database/exploitdb.git"
OUTPUT_CSV = os.path.join(RAW_DATA_DIR, "exploitdb.csv")
OUTPUT_JSON = os.path.join(RAW_DATA_DIR, "exploitdb.json")
OUTPUT_FULL_JSON = os.path.join(RAW_DATA_DIR, "exploitdb_full.json")

logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s %(message)s")

def fetch_exploitdb():
    # Step 1: Clone or update the repo
    repo_dir = os.path.join(RAW_DATA_DIR, "exploitdb_repo")
    if not os.path.exists(repo_dir):
        logging.info(f"Cloning Exploit-DB repo to {repo_dir}")
        subprocess.run(["git", "clone", "--depth=1", EXPLOITDB_REPO, repo_dir], check=True)
    else:
        logging.info(f"Updating Exploit-DB repo in {repo_dir}")
        subprocess.run(["git", "-C", repo_dir, "pull"], check=True)

    # Step 2: Download CSV for comparison
    logging.info(f"Downloading Exploit-DB CSV from {EXPLOITDB_CSV_URL}")
    resp = requests.get(EXPLOITDB_CSV_URL, timeout=120)
    resp.raise_for_status()
    with open(OUTPUT_CSV, 'wb') as f:
        f.write(resp.content)
    logging.info(f"Saved Exploit-DB CSV to {OUTPUT_CSV}")

    # Step 3: Parse CSV and combine with exploit files
    with open(OUTPUT_CSV, newline='', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        exploits = list(reader)
    with open(OUTPUT_JSON, 'w', encoding='utf-8') as f:
        json.dump(exploits, f)
    logging.info(f"Extracted and wrote {len(exploits)} Exploit-DB entries to {OUTPUT_JSON}")

    # Step 4: Combine metadata with file content (full JSON)
    full_exploits = []
    for row in exploits:
        exploit_rel_path = row.get('file')
        exploit_abs_path = os.path.join(repo_dir, exploit_rel_path) if exploit_rel_path else None
        code = None
        if exploit_abs_path and os.path.exists(exploit_abs_path):
            try:
                with open(exploit_abs_path, 'r', encoding='utf-8', errors='replace') as ef:
                    code = ef.read()
            except Exception as e:
                logging.warning(f"Failed to read exploit file {exploit_abs_path}: {e}")
        row_with_code = dict(row)
        row_with_code['exploit_code'] = code
        full_exploits.append(row_with_code)
    with open(OUTPUT_FULL_JSON, 'w', encoding='utf-8') as f:
        json.dump(full_exploits, f)
    logging.info(f"Wrote {len(full_exploits)} full Exploit-DB entries (with code) to {OUTPUT_FULL_JSON}")

if __name__ == "__main__":
    fetch_exploitdb()
