import os
import requests
import json
from datetime import datetime
import logging

CISA_KEV_URL = os.getenv("CISA_KEV_URL", "https://www.cisa.gov/sites/default/files/feeds/known_exploited_vulnerabilities.json")
RAW_DIR = os.getenv("RAW_DIR", "/etl-data/raw/cisa_known_exploited")
NORM_DIR = os.getenv("NORM_DIR", "/etl-data/normalized/cisa_known_exploited")
logging.basicConfig(level=logging.INFO)

def fetch_feed(url):
    resp = requests.get(url, timeout=60)
    resp.raise_for_status()
    return resp.json()

from common.osv_normalizer import create_osv_record

def parse_entries(data):
    vulns = []
    field_map = {
        "id": "cveID",
        "modified": "dateAdded",
        "summary": "vulnerabilityName",
        "details": "shortDescription",
        # references and affected handled below
    }
    id_fields = ["cveID"]
    extra_fields = [
        "vendorProject", "product", "requiredAction", "dueDate",
        "knownRansomwareCampaignUse", "notes", "cwes"
    ]
    for item in data.get('vulnerabilities', []):
        # Build references as a list of dicts
        references = [{"type": "REFERENCE", "url": url} for url in item.get("notes", "").split("; ") if url]
        osv_obj = create_osv_record(
            raw=item,
            feed_name="cisa_known_exploited",
            field_map={**field_map, "references": "references", "affected": "affected"},
            id_fields=id_fields,
            extra_fields=extra_fields
        )
        osv_obj["references"] = references
        osv_obj["affected"] = []  # No affected data in CISA KEV
        vulns.append(osv_obj)
    return vulns

def save_json(data, outdir, prefix):
    os.makedirs(outdir, exist_ok=True)
    ts = datetime.utcnow().strftime("%Y%m%dT%H%M%S")
    path = os.path.join(outdir, f"{prefix}_{ts}.json")
    with open(path, "w") as f:
        json.dump(data, f, indent=2)
    return path

def main():
    logging.info(f"Fetching CISA KEV from {CISA_KEV_URL}")
    raw = fetch_feed(CISA_KEV_URL)
    raw_path = save_json(raw, RAW_DIR, "cisa_kev_raw")
    logging.info(f"Raw CISA KEV data saved to {raw_path}")
    vulns = parse_entries(raw)
    norm_path = save_json(vulns, NORM_DIR, "cisa_kev_norm")
    logging.info(f"Normalized KEV saved to {norm_path}")

if __name__ == "__main__":
    main()
