#!/bin/bash

# exploitdb-update.sh - Update exploit data from Exploit-DB
# Using dynamic path detection for portability
SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
UTILS_DIR="$SCRIPT_DIR/utils"
BASEPATH="$(dirname "$(dirname "$SCRIPT_DIR")")"
TEMP_DIR="/tmp/exploitdb"
EXPLOITDB_REPO="https://github.com/offensive-security/exploitdb.git"
EXPLOITDB_CSV="$TEMP_DIR/files_exploits.csv"

# Source the database functions
source "$UTILS_DIR/db-functions.sh"

echo "=== Updating ExploitDB Data ==="
echo "Using base path: $BASEPATH"

# Create temp directory if it doesn't exist
mkdir -p "$TEMP_DIR"

# Check if ExploitDB repository exists, if not clone it
if [ ! -d "$TEMP_DIR/.git" ]; then
  echo "Cloning ExploitDB repository..."
  git clone --depth 1 "$EXPLOITDB_REPO" "$TEMP_DIR"
else
  echo "Updating ExploitDB repository..."
  (cd "$TEMP_DIR" && git pull)
fi

# Check if the CSV file exists
if [ ! -f "$EXPLOITDB_CSV" ]; then
  echo "Error: ExploitDB CSV file not found at $EXPLOITDB_CSV"
  exit 1
fi

echo "Clearing previous ExploitDB records..."
clear_source_exploits "source_edb"

echo "Processing ExploitDB CSV..."
# Skip header line
tail -n +2 "$EXPLOITDB_CSV" | while IFS=',' read -r edb_id file_type date author platform type port path description
do
  # Extract CVE-ID from description if available
  cve_ids=$(echo "$description" | grep -oE 'CVE-[0-9]{4}-[0-9]{4,}' | sort -u)
  
  # If no CVE-ID found, skip this entry
  if [ -z "$cve_ids" ]; then
    continue
  fi
  
  # Clean up description and path
  description=$(echo "$description" | sed 's/"/\\"/g')
  path=$(echo "$path" | sed 's/"//g')
  
  # Form the URL to the exploit
  url="https://www.exploit-db.com/exploits/$edb_id"
  
  # Form a title from the description
  title=$(echo "$description" | cut -c1-100)
  
  # Process each CVE-ID found
  for cve_id in $cve_ids; do
    echo "Adding $cve_id from ExploitDB (ID: $edb_id)"
    
    # Insert the exploit record
    insert_exploit "$cve_id" "source_edb" "$edb_id" "$url" "$title" "$description" "$date" "$type"
    
    # Add metadata
    insert_exploit_metadata "$cve_id" "source_edb" "$edb_id" "author" "$author"
    insert_exploit_metadata "$cve_id" "source_edb" "$edb_id" "platform" "$platform"
    insert_exploit_metadata "$cve_id" "source_edb" "$edb_id" "file_path" "$path"
    
    # Add tags
    insert_exploit_tag "$cve_id" "source_edb" "$edb_id" "$type"
    insert_exploit_tag "$cve_id" "source_edb" "$edb_id" "$platform"
  done
done

# Add searchsploit integration as an alternative method
echo "Checking for searchsploit availability..."
if command -v searchsploit >/dev/null 2>&1; then
  echo "Using searchsploit to ensure database is up-to-date..."
  searchsploit --update >/dev/null 2>&1 || echo "Warning: searchsploit update failed"
  
  # We could add specific CVE lookups here if needed
  echo "searchsploit integration available for direct CVE queries"
else
  echo "Note: searchsploit not installed. Using only direct ExploitDB data."
fi

echo "=== ExploitDB Update Completed ==="
